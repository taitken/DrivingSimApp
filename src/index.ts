import { exec, execFile } from 'child_process';
import { app, BrowserWindow, dialog, ipcMain, session } from 'electron';
import * as path from 'path';
import * as fs from 'fs';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

// Handle getting file dir
ipcMain.handle("get_file_list", async (_event, relativePath: string, fileTypes: string[]) => {
  let returnFiles = [];
  let files = fs.readdirSync(path.join(process.cwd(), relativePath));
  files.forEach(file => {
    if (fileTypes && fileTypes.length > 0) {
      fileTypes.forEach(type => {
        if (file.endsWith(type)) {
          returnFiles.push(file);
        }
      })
    }
    else {
      return returnFiles;
    }
  })
  return [...new Set(returnFiles)];
});



const createWindow = (): BrowserWindow => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 1200,
    width: 1600,
    webPreferences: {
      nodeIntegration: true,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  mainWindow.webContents.session.webRequest.onBeforeSendHeaders(
    (details, callback) => {
      callback({ requestHeaders: { Origin: '*', ...details.requestHeaders } });
    },
  );
  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  let backend = path.join(process.cwd(), 'backend/dist/app.exe')
  let childProcess = execFile(
    backend,
    {
      windowsHide: true,
    },
    (err, stdout, stderr) => {
      if (err) {
        console.log(err);
      }
      if (stdout) {
        console.log(stdout);
      }
      if (stderr) {
        console.log(stderr);
      }
    }
  )

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
  return mainWindow;
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  session.defaultSession.webRequest.onHeadersReceived((details, callback) => {
    callback({
      responseHeaders: {
        ...details.responseHeaders,
        'Content-Security-Policy': ["default-src 'self' http://127.0.0.1:5000; script-src 'self' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; media-src 'self' data: blob: *;"],
        'Access-Control-Allow-Origin': ['*'],
      }
    })
  })
  let window = createWindow();

  // Copy file to tmp
  ipcMain.handle("copy_file_to_tmp", async (_event,) => {
    return dialog.showOpenDialog(
      window,
      {
        title: "Select video file",
        properties: ["openFile"]
      }).then((selection) => {
        if (selection) {
          let filePath = selection.filePaths[0];
          let fileName = filePath.split(/(\\|\/)/g).pop();
          fs.copyFileSync(selection.filePaths[0], path.join(process.cwd(), 'resources', 'tmp', fileName));
          let buffer = fs.readFileSync(path.join(process.cwd(), 'resources', 'tmp', fileName));
          return {buffer: buffer, fileName: fileName};
        }
      });
  });
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  let workingDir = path.join(process.cwd(), 'resources', 'tmp');
  fs.readdir(workingDir, (err, files) => {
    if (err) throw err;

    for (const file of files) {
      fs.unlink(path.join(workingDir, file), (err) => {
        if (err) throw err;
      });
    }
  });

  exec('taskkill /f /t /im app.exe', (err, stdout, stderr) => {
    if (err) {
      console.log(err)
      return;
    }
    console.log(`stdout: ${stdout}`);
    console.log(`stderr: ${stderr}`);
  });
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
